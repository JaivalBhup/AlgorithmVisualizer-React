[{"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/index.js":"1","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/reportWebVitals.js":"2","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/App.js":"3","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Visualizer.js":"4","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Node.js":"5","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/dijkstra.js":"6","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/AStar.js":"7","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/dfs.js":"8","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/bfs.js":"9","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/gbs.js":"10","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/MazeAlgorithms/RandomDFS.js":"11","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/MazeAlgorithms/RecursiveDivision.js":"12"},{"size":457,"mtime":1607697232354,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1607676521735,"results":"15","hashOfConfig":"14"},{"size":6113,"mtime":1608102039715,"results":"16","hashOfConfig":"14"},{"size":13823,"mtime":1608099305595,"results":"17","hashOfConfig":"14"},{"size":758,"mtime":1608036551615,"results":"18","hashOfConfig":"14"},{"size":1721,"mtime":1608035956817,"results":"19","hashOfConfig":"14"},{"size":2126,"mtime":1607882372569,"results":"20","hashOfConfig":"14"},{"size":998,"mtime":1607938463164,"results":"21","hashOfConfig":"14"},{"size":1935,"mtime":1607974706089,"results":"22","hashOfConfig":"14"},{"size":1265,"mtime":1607869101652,"results":"23","hashOfConfig":"14"},{"size":1866,"mtime":1608048239868,"results":"24","hashOfConfig":"14"},{"size":2744,"mtime":1608039246857,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"lu4nte",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/index.js",[],["53","54"],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/reportWebVitals.js",[],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/App.js",["55","56","57","58","59","60","61","62","63","64"],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Visualizer.js",["65"],"import React from \"react\";\nimport Node from \"./Node\";\nimport {dijkstra,getPath} from \"./Algorithms/dijkstra\"\nimport {AStar} from \"./Algorithms/AStar\"\nimport {DFS} from './Algorithms/dfs';\nimport {BFS, Bidirectional} from './Algorithms/bfs';\nimport {GBS} from './Algorithms/gbs';\nimport {generateMazeRandomDFS} from './MazeAlgorithms/RandomDFS';\nimport { recursiveDivision } from \"./MazeAlgorithms/RecursiveDivision\";\nimport \"./grid.css\";\n\nlet STARTNODE_i = 10\nlet STARTNODE_j = 15\nlet ENDNODE_i = 10\nlet ENDNODE_j = 35\nconst WIDTH = 60\nconst HEIGHT = 30\n\nclass Visualizer extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            grid: [],\n            mousePressed:false,\n            startPicked:false,\n            endPicked: false,\n            message: \"Drag and drop Start and End nodes to change their position. Drag through the grid to create walls\",\n            showScores: false,\n            algoIsRunning: false\n        }\n    }\n    componentDidMount(){\n        const grid = getGrid(WIDTH,HEIGHT)\n        this.setState({grid: grid})\n    }\n\n    //Clears Animated nodes only <- Bugs\n    clearAnimation(){\n       // const grid = getGrid(WIDTH,HEIGHT)\n        for(let i = 0; i<this.state.grid.length; i++){\n            for(let j = 0; j < this.state.grid[0].length;j++){\n                if(!this.state.grid[i][j].isWall){\n                    this.setState({grid: makeNewNode(this.state.grid, i, j)})\n                    if(!this.state.grid[i][j].isStart && !this.state.grid[i][j].isEnd){\n                        document.getElementById(`node-${i}-${j}`).className = \"node\";\n                        document.getElementById(`node-${i}-${j}`).innerHTML = \"\";\n                    }\n                \n                }\n            }\n        } \n    }\n    clear(){\n        const grid = getGrid(WIDTH,HEIGHT)\n        for(let i = 0; i<this.state.grid.length; i++){\n            for(let j = 0; j < this.state.grid[0].length;j++){\n                if(!this.state.grid[i][j].isStart && !this.state.grid[i][j].isEnd){\n                    document.getElementById(`node-${i}-${j}`).className = \"node\";\n                    document.getElementById(`node-${i}-${j}`).innerHTML = \"\";\n                }\n            }\n        } \n        this.setState({grid: grid,message: \"Drag and drop Start and End nodes to change their position. Drag through the grid to create walls\"})      \n    }\n    //----------Clear\n\n    //Mouse Events For Wall, Start and End\n    handleMouseDown(i,j){\n        const node = this.state.grid[i][j]\n        if(node.isStart){\n            const ng = removeStart(this.state.grid, i,j)\n            this.setState({mousePressed:true, startPicked: true, grid: ng})\n            \n        }\n        else if(node.isEnd){\n            const ng = removeEnd(this.state.grid, i,j)\n            this.setState({mousePressed:true, endPicked: true, grid: ng})\n        }\n        else{\n            const ng = toggleWall(this.state.grid, i, j);\n            this.setState({grid:ng, mousePressed : true});\n        }\n    }\n    handleMouseEnter(i,j){\n        if(!this.state.mousePressed) return;\n        if(this.state.startPicked){\n            STARTNODE_i = i\n            STARTNODE_j = j\n            const ng = makeStart(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else if(this.state.endPicked){\n            ENDNODE_i = i\n            ENDNODE_j = j\n            const ng = makeEnd(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else{\n        const ng = toggleWall(this.state.grid, i, j);\n        this.setState({grid:ng});\n        }\n    }\n    handleMouseLeave(i,j){\n        if(!this.state.mousePressed) return;\n        if(this.state.startPicked){\n            const ng = removeStart(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else if(this.state.endPicked){\n            const ng = removeEnd(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n    }\n    handleMouseUp(){\n        this.setState({startPicked: false, endPicked: false,mousePressed : false});\n    }\n\n    //------------------ Mouse Events\n\n    //Animation\n    animate(path, shortPath, showScore){\n        if(path===-1){this.setState({message:\"No Solution\"});\n        return;    \n    }\n        else{\n            for(let i = 0; i <= path.length; i++){\n                if (i===path.length){\n                    setTimeout(()=>{\n                        this.animateShortestPath(shortPath)\n                    }, 10*i)\n                    return;\n                }\n            setTimeout(()=>{\n                const node = path[i]\n                if(!node.isStart && !node.isEnd){\n                document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n                if(showScore){\n                    document.getElementById(`node-${node.row}-${node.col}`).innerHTML = `<p class = \"score\">${node.f}</p>`;\n                }\n                }\n                }, 10*i);\n            }\n    }\n    }\n    animateShortestPath(path){\n        for(let i = 0; i < path.length; i++){\n            setTimeout(()=>{\n                const node = path[i]\n                if(!node.isStart && !node.isEnd){\n                document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest\";\n                }\n                }, 10*i);\n            }\n            this.setState({message:\"Found the shortest path.\"})\n            setTimeout(()=>{\n                this.setState({message:\"Clear the grid\"})\n            }, 3000)\n            \n    }\n    //--------animation\n\n    // Dijkstra\n    visualizeDijkstra(showScore){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = dijkstra(grid,startNode, endNode)\n        const shortestPath = getPath(endNode)\n        this.animate(path, shortestPath, showScore);\n    }\n    //-----dijkstra\n    // A*\n    visualizeAStar(showScore){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = AStar(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath, showScore);\n    }\n    //------a*\n    //DFS\n    visualizeDFS(){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = DFS(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath, false);\n    }\n    //-------DFS\n    //BFS\n    visualizeBFS(){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = BFS(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath, false);\n    }\n    //------BFS\n    //Greedy first search\n    visualizeGBS(showScore){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = GBS(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path,shortestPath, showScore)\n    }\n\n//     animateBidirectional(path, shortestPath1, shortestPath2){\n//             for(let i = 0; i <= path[0].length; i++){\n//                 // if (i===path.length){\n//                 //     setTimeout(()=>{\n//                 //         this.animateShortestPath(shortestPath1)\n//                 //     }, 10*i)\n//                 //     return;\n//                 // }\n//             setTimeout(()=>{\n//                 const node1 = path[0][i]\n//                 const node2 = path[1][i]\n//                     if(node1 && node2){\n//                         if(!node1.isStart && !node1.isEnd && !node2.isStart && !node2.isEnd){\n//                             document.getElementById(`node-${node1.row}-${node1.col}`).className = \"node node-visited\";\n//                             document.getElementById(`node-${node2.row}-${node2.col}`).className = \"node node-visited\";\n//                     }\n//             }\n//                 }, 10*i);\n//             }\n// }\n    // visualizeBidirectional(){\n    //     this.setState({message:\"Searching...\", algoIsRunning:true})\n    //     const grid = this.state.grid\n    //     const startNode = grid[STARTNODE_i][STARTNODE_j]\n    //     const endNode = grid[ENDNODE_i][ENDNODE_j]\n    //     const path = Bidirectional(grid,startNode, endNode)\n    //     if(path===-1){\n    //         this.setState({message:\"No Solution\"});\n    //         return; \n    //     }\n    //     //console.log(path)\n    //     // const shortestPath1 = getPath(path[2][0])\n    //     // const shortestPath2 = getPath(path[2][1])\n    //     //this.animateBidirectional(path, shortestPath1, shortestPath2)\n    // }\n    visualizeRandomDFSMaze(){\n        this.setState({algoIsRunning:true})\n        this.clear()\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const walls = generateMazeRandomDFS(grid, startNode, endNode)\n        this.animateWalls(walls)\n    }\n    visualizeRecursiveDivision(){\n        this.setState({algoIsRunning:true})\n        this.clear()\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const walls = recursiveDivision(grid, startNode, endNode)\n        this.animateWalls(walls)\n    }\n    animateWalls(walls){\n        for(let i = 0; i<=walls.length;i++){  \n            if(i===walls.length){\n                setTimeout(()=>{\n                    const ng = makeWalls(this.state.grid,walls)\n                    this.setState({grid:ng})\n                },10*i)\n                return; \n            }\n            setTimeout(()=>{\n                if(walls[i]){\n                document.getElementById(`node-${walls[i].row}-${walls[i].col}`).className = \"node node-wall\";\n                }\n                },10*i)\n    }\n    }\n    render(){\n        const nodes = this.state.grid\n        return (<div className = \"main\">\n        <h6>{this.state.message}</h6>\n            <table className = \"grid\">\n            <tbody>\n            {nodes.map((row, rowId) => {\n                return <tr className = \"row\" key = {rowId}>\n                        {row.map((cell, cellId)=>{\n                            const {row, col, isEnd, isStart, isWall, isVisited} = cell;\n                            return <Node\n                                key = {cellId}\n                                col = {col}\n                                row = {row}\n                                isStart = {isStart}\n                                isEnd = {isEnd}\n                                isWall = {isWall}\n                                isVisited = {isVisited}\n                                onMouseDown = {(row,col)=>this.handleMouseDown(row,col)}\n                                onMouseEnter = {(row,col)=>this.handleMouseEnter(row,col)}\n                                onMouseUp = {()=>this.handleMouseUp()}\n                                onMouseLeave = {(row, col)=>this.handleMouseLeave(row,col)}>\n                                </Node>})}</tr>\n                        })}\n            </tbody>\n        </table>\n        </div>\n        )\n    }\n}\n\n// Helper Functions\nfunction getGrid(width, height) {\n    const grid = []\n    for(let i = 0; i<height; i++){\n        const row = []\n        for(let j = 0; j <width; j++){ \n            row.push(newNode(i,j))\n           }\n            grid.push(row)\n    }\n    return grid\n }\n\n function newNode(i,j) {\n     return{\n         row: i,\n         col: j,\n         isStart: i === STARTNODE_i && j === STARTNODE_j,\n         isEnd: i === ENDNODE_i && j === ENDNODE_j,\n         distance: Infinity,\n         previous: null,\n         isVisited: false,\n         isWall: false,\n         h:0,\n         g:0,\n         f:0\n     }\n }\n \nfunction makeNewNode(grid,i,j){\n    const ng = grid.slice();\n    const node = newNode(i,j);\n    ng[i][j] = node\n    return ng\n}\n\nfunction toggleWall(grid, i, j){\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isWall: !node.isWall,\n    }\n    ng[i][j] = n\n    return ng\n\n}\nfunction makeWalls(grid, walls){\n    const ng = grid.slice();\n        for(let w of walls){\n            const i = w.row\n            const j = w.col\n            ng[i][j] = w;\n        }\n    return ng\n\n}\n\nfunction makeStart(grid, i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isStart: true,\n        isWall: false\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction removeStart(grid,i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isStart: false,\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction makeEnd(grid, i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isEnd: true,\n        isWall: false\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction removeEnd(grid,i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isEnd: false,\n    }\n    ng[i][j] = n\n    return ng\n}\n\nexport default Visualizer","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Node.js",[],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/dijkstra.js",[],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/AStar.js",[],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/dfs.js",[],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/bfs.js",["66"],"function traverse(grid, startNode) {\n    const queue = []\n    const visited = []\n    startNode.isVisited = true\n    queue.push(startNode)\n    while(queue.length>0){\n        const current = queue.shift()\n        visited.push(current)\n        const neighbours = getNeighbours(current, grid)\n        for(let n of neighbours){\n            if(!n.isVisited && !n.isWall){\n                queue.push(n)\n                n.previous = current\n                n.isVisited = true\n            }\n        }\n    }\n    return visited\n}\n\nexport function BFS(grid, startNode, endNode) {\n    const nodes = traverse(grid, startNode)\n    const t = []\n    for(let n of nodes){\n        if(n===endNode){return t}\n        t.push(n)\n    }\n    return -1\n}\n\nexport function Bidirectional(grid, startNode, endNode) {\n    const grid1 = grid.slice()\n    const grid2 = grid.slice()\n    const forward = traverse(grid1, startNode)\n    const backward = traverse(grid2, endNode)\n    console.log(backward)\n    // console.log(forward)\n    // console.log(backward)\n    // let intersection = []\n    // for(let f of forward){\n    //     backward.slice().reverse().forEach((b)=>{\n    //         if(f.row === b.row && f.col === b.col){\n    //             intersection[0] = f\n    //             intersection[1] = b\n    //             const path1 = forward.splice(0, forward.indexOf(intersection[0]))\n    //             const path2 = backward.splice(0, backward.indexOf(intersection[1]))\n    //             return [path1, path2, intersection]\n    //         }\n    //     })\n    // }\n    return -1\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}","/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/Algorithms/gbs.js",[],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/MazeAlgorithms/RandomDFS.js",[],"/Users/jaivalbhuptani/Desktop/algorithm_visualizer/src/Visulalizer/MazeAlgorithms/RecursiveDivision.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":103,"column":9,"nodeType":"73","endLine":103,"endColumn":149},{"ruleId":"71","severity":1,"message":"72","line":107,"column":11,"nodeType":"73","endLine":107,"endColumn":81},{"ruleId":"71","severity":1,"message":"72","line":108,"column":11,"nodeType":"73","endLine":108,"endColumn":75},{"ruleId":"71","severity":1,"message":"72","line":109,"column":11,"nodeType":"73","endLine":109,"endColumn":76},{"ruleId":"71","severity":1,"message":"72","line":111,"column":11,"nodeType":"73","endLine":111,"endColumn":76},{"ruleId":"71","severity":1,"message":"72","line":112,"column":11,"nodeType":"73","endLine":112,"endColumn":86},{"ruleId":"71","severity":1,"message":"72","line":113,"column":11,"nodeType":"73","endLine":113,"endColumn":76},{"ruleId":"71","severity":1,"message":"72","line":118,"column":9,"nodeType":"73","endLine":118,"endColumn":149},{"ruleId":"71","severity":1,"message":"72","line":122,"column":11,"nodeType":"73","endLine":122,"endColumn":78},{"ruleId":"71","severity":1,"message":"72","line":123,"column":11,"nodeType":"73","endLine":123,"endColumn":77},{"ruleId":"74","severity":1,"message":"75","line":6,"column":14,"nodeType":"76","messageId":"77","endLine":6,"endColumn":27},{"ruleId":"74","severity":1,"message":"78","line":34,"column":11,"nodeType":"76","messageId":"77","endLine":34,"endColumn":18},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Bidirectional' is defined but never used.","Identifier","unusedVar","'forward' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]