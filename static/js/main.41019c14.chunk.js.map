{"version":3,"sources":["Visulalizer/Node.js","Visulalizer/Algorithms/dijkstra.js","Visulalizer/Algorithms/AStar.js","Visulalizer/Algorithms/dfs.js","Visulalizer/Algorithms/bfs.js","Visulalizer/Visualizer.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","isEnd","isStart","col","row","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","addedClass","id","className","React","Component","dijkstra","grid","startNode","endNode","path","distance","unvisitedNodes","nodes","i","j","push","getAllNodes","length","sort","n1","n2","nextNode","shift","Infinity","isVisited","updateNeighbour","node","neighbours","filter","neighbour","getNeighbours","n","previous","getPath","cn","unshift","getH","node1","node2","Math","abs","traverse","visited","ns","includes","DFS","t","BFS","queue","current","STARTNODE_i","STARTNODE_j","ENDNODE_i","ENDNODE_j","getGrid","width","height","newNode","h","g","f","toggleWall","ng","slice","removeStart","removeEnd","Visualizer","state","mousePressed","startPicked","endPicked","message","setState","document","getElementById","makeStart","makeEnd","shortPath","setTimeout","animateShortestPath","shortestPath","animate","open","closed","lowestIndex","currentNode","index","indexOf","splice","trackG","AStar","console","log","map","rowId","cell","cellId","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","App","currentAlgo","child","createRef","a","e","preventDefault","clear","algo","visualizeDijkstra","visualizeAStar","visualizeDFS","visualizeBFS","src","style","marginRight","alt","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","chageAlgo","Visualize","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.41019c14.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Node.css\"\n\nexport default class Node extends React.Component{\n    render(){\n        const {isEnd, isStart, col, row, isWall, onMouseDown, onMouseEnter, onMouseUp, onMouseLeave} = this.props\n        const addedClass = isStart ? \"node-start\" : isEnd ? \"node-end\" :isWall ? 'node-wall' : '';\n        return <td id = {`node-${row}-${col}`}\n                    className = {`node ${addedClass}`}\n                    onMouseDown = {()=>onMouseDown(row,col)}\n                    onMouseEnter = {() => onMouseEnter(row,col)}\n                    onMouseUp = {()=>onMouseUp()}\n                    onMouseLeave = {()=>onMouseLeave(row,col)}\n                    ></td>\n    }\n}\n\nexport const DEFAULT_NODE = {\n    row: 0,\n    col: 0,\n};","\n export function dijkstra(grid, startNode, endNode){\n    if (!startNode || !endNode || (startNode === endNode)){\n        return false;\n    }\n    const path = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while(!!unvisitedNodes.length){\n        sortNodes(unvisitedNodes);\n        const nextNode = unvisitedNodes.shift();\n        if (nextNode.isWall) continue;\n        if (nextNode.distance === Infinity) return -1;\n        nextNode.isVisited = true\n        path.push(nextNode)\n        if(nextNode === endNode) return path\n        updateNeighbour(nextNode, grid)\n    }\n     \n}\n\nfunction sortNodes(n){\n    n.sort((n1, n2) => n1.distance - n2.distance );\n}\n\nfunction updateNeighbour(node,grid) {\n    const neighbours = getNeighbours(node, grid);\n    for(const n of neighbours){\n        n.distance = node.distance + 1;\n        n.previous = node\n    }\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}\n\nfunction getAllNodes(grid){\n    const nodes = [];\n    for(let i of grid){\n        for(let j of i){\n            nodes.push(j);\n        }\n    }\n    return nodes;\n}\n\nexport function getPath(endNode) {\n    const path = []\n    let cn = endNode\n    while(cn !== null){\n        path.unshift(cn)\n        cn = cn.previous\n    }\n    return path\n}","export function AStar(grid,startNode,endNode) {\n    if (!startNode || !endNode || (startNode === endNode)){\n        return false;\n    }\n    const open = []\n    const closed = []\n    open.push(startNode);\n    while(true){\n        if(open.length > 0){\n            let lowestIndex = 0\n            for(let i = 0; i<open.length; i++){\n                if (open[i].f < open[lowestIndex].f){\n                    lowestIndex = i\n                }\n            }\n            const currentNode = open[lowestIndex]\n            if(currentNode === endNode){\n                return closed\n            }\n            closed.push(currentNode)\n            currentNode.isVisited = true\n            const index = open.indexOf(currentNode)\n            if(index>-1){\n                open.splice(index,1)\n            }\n            const neighbours = getNeighbours(currentNode, grid)\n            for(let n of neighbours){\n                if(!n.isWall && !(closed.includes(n))){\n                    const trackG = currentNode.g + 1\n                    if(open.includes(n)){\n                        if(n.g>trackG){\n                            n.h = getH(n, endNode)\n                            n.g = trackG\n                            n.f = n.g + n.h\n                        }\n                    }\n                    else{\n                        n.h = getH(n, endNode)\n                        n.g = trackG\n                        n.f = n.g + n.h\n                        open.push(n)\n                    }\n                    n.previous = currentNode\n                }\n            }\n\n        }\n        else{\n            return -1\n        }\n    }\n}\n\nfunction getH(node1,node2) {\n    let p =  Math.abs(node1.row - node2.row) + Math.abs(node1.col-node2.col)\n    return p\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}","\nfunction traverse(grid, startNode, visited){\n    visited.push(startNode)\n    const neighbours = getNeighbours(startNode, grid);\n    const ns = neighbours.filter(n=>!visited.includes(n))\n    for(let n of ns){\n        if(n.isWall){continue}\n        n.previous = startNode;\n        traverse(grid, n, visited);\n    }\n    return visited\n}\n\nexport function DFS(grid, startNode, endNode) {\n    const nodes = traverse(grid, startNode,[])\n    const t = []\n    for(let n of nodes){\n        if(n===endNode){return t}\n        t.push(n)\n    }\n    return -1\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    \n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours);\n}","function traverse(grid, startNode) {\n    const queue = []\n    const visited = []\n    startNode.isVisited = true\n    queue.push(startNode)\n    while(queue.length>0){\n        const current = queue.shift()\n        visited.push(current)\n        const neighbours = getNeighbours(current, grid)\n        for(let n of neighbours){\n            if(!n.isVisited && !n.isWall){\n                queue.push(n)\n                n.previous = current\n                n.isVisited = true\n            }\n        }\n    }\n    return visited\n}\n\nexport function BFS(grid, startNode, endNode) {\n    const nodes = traverse(grid, startNode)\n    const t = []\n    for(let n of nodes){\n        if(n===endNode){return t}\n        t.push(n)\n    }\n    return -1\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}","import React from \"react\";\nimport Node from \"./Node\";\nimport {dijkstra,getPath} from \"./Algorithms/dijkstra\"\nimport {AStar} from \"./Algorithms/AStar\"\nimport {DFS} from './Algorithms/dfs';\nimport {BFS} from './Algorithms/bfs';\nimport \"./grid.css\";\n\nlet STARTNODE_i = 10\nlet STARTNODE_j = 15\nlet ENDNODE_i = 10\nlet ENDNODE_j = 35\n\nclass Visualizer extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            grid: [],\n            mousePressed:false,\n            startPicked:false,\n            endPicked: false,\n            message: \"Drag and drop Start and End nodes to change their position. Drag through the grid to create walls\"\n        }\n    }\n    componentDidMount(){\n        const grid = getGrid(50,30)\n        this.setState({grid: grid})\n    }\n\n    //Clears Animated nodes only <- Bugs\n    clearAnimation(){\n        for(let i = 0; i<this.state.grid.length; i++){\n            for(let j = 0; j < this.state.grid[0].length;j++){\n            if(!this.state.grid[i][j].isStart && !this.state.grid[i][j].isEnd && !this.state.grid[i][j].isWall){\n                document.getElementById(`node-${i}-${j}`).className = \"node\";\n            }\n            }\n        } \n    }\n    clear(){\n        const grid = getGrid(50,30)\n        this.setState({ grid: grid });\n        for(let i = 0; i<this.state.grid.length; i++){\n            for(let j = 0; j < this.state.grid[0].length;j++){\n            if(this.state.grid[i][j].isStart){            \n                document.getElementById(`node-${i}-${j}`).className = \"node node-start\";}\n            if(this.state.grid[i][j].isEnd){            \n                    document.getElementById(`node-${i}-${j}`).className = \"node node-end\";}\n            if(!this.state.grid[i][j].isStart && !this.state.grid[i][j].isEnd){\n            document.getElementById(`node-${i}-${j}`).className = \"node\";\n            }\n            }\n            this.setState({message: \"Drag and drop Start and End nodes to change their position. Drag through the grid to create walls\"})\n        } \n          \n    }\n    //----------Clear\n\n    //Mouse Events For Wall, Start and End\n    handleMouseDown(i,j){\n        const node = this.state.grid[i][j]\n        if(node.isStart){\n            const ng = removeStart(this.state.grid, i,j)\n            this.setState({mousePressed:true, startPicked: true, grid: ng})\n            \n        }\n        else if(node.isEnd){\n            const ng = removeEnd(this.state.grid, i,j)\n            this.setState({mousePressed:true, endPicked: true, grid: ng})\n        }\n        else{\n            const ng = toggleWall(this.state.grid, i, j);\n            this.setState({grid:ng, mousePressed : true});\n        }\n    }\n    handleMouseEnter(i,j){\n        if(!this.state.mousePressed) return;\n        if(this.state.startPicked){\n            STARTNODE_i = i\n            STARTNODE_j = j\n            const ng = makeStart(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else if(this.state.endPicked){\n            ENDNODE_i = i\n            ENDNODE_j = j\n            const ng = makeEnd(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else{\n        const ng = toggleWall(this.state.grid, i, j);\n        this.setState({grid:ng});\n        }\n    }\n    handleMouseLeave(i,j){\n        if(!this.state.mousePressed) return;\n        if(this.state.startPicked){\n            const ng = removeStart(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else if(this.state.endPicked){\n            const ng = removeEnd(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n    }\n    handleMouseUp(){\n        this.setState({startPicked: false, endPicked: false,mousePressed : false});\n    }\n\n    //------------------ Mouse Events\n\n    //Animation\n    animate(path, shortPath){\n        if(path===-1){this.setState({message:\"No Solution\"});\n        return;    \n    }\n        else{\n            for(let i = 0; i <= path.length; i++){\n                if (i===path.length){\n                    setTimeout(()=>{\n                        this.animateShortestPath(shortPath)\n                    }, 10*i)\n                    return;\n                }\n            setTimeout(()=>{\n                const node = path[i]\n                if(!node.isStart && !node.isEnd){\n                document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n                }\n                }, 10*i);\n            }\n    }\n    }\n    animateShortestPath(path){\n        for(let i = 0; i < path.length; i++){\n            setTimeout(()=>{\n                const node = path[i]\n                if(!node.isStart && !node.isEnd){\n                document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest\";\n                }\n                }, 10*i);\n            }\n            this.setState({message:\"Found the shortest path.\"})\n            setTimeout(()=>{\n                this.setState({message:\"Clear the grid\"})\n            }, 3000)\n            \n    }\n    //--------animation\n\n    // Dijkstra\n    visualizeDijkstra(){\n        this.setState({message:\"Searching...\"})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = dijkstra(grid,startNode, endNode)\n        const shortestPath = getPath(endNode)\n        this.animate(path, shortestPath);\n    }\n    //-----dijkstra\n    // A*\n    visualizeAStar(){\n        this.setState({message:\"Searching...\"})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = AStar(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath);\n    }\n    //------a*\n    //DFS\n    visualizeDFS(){\n        this.setState({message:\"Searching...\"})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = DFS(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath);\n    }\n    //-------DFS\n    visualizeBFS(){\n        console.log(\"BFS\")\n        this.setState({message:\"Searching...\"})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = BFS(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath);\n    }\n    render(){\n        const nodes = this.state.grid\n        return (<div className = \"main\">\n            <h6>{this.state.message}</h6>\n            <table className = \"grid\">\n            <tbody>\n            {nodes.map((row, rowId) => {\n                return <tr className = \"row\" key = {rowId}>\n                        {row.map((cell, cellId)=>{\n                            const {row, col, isEnd, isStart, isWall, isVisited} = cell;\n                            return <Node\n                                key = {cellId}\n                                col = {col}\n                                row = {row}\n                                isStart = {isStart}\n                                isEnd = {isEnd}\n                                isWall = {isWall}\n                                isVisited = {isVisited}\n                                onMouseDown = {(row,col)=>this.handleMouseDown(row,col)}\n                                onMouseEnter = {(row,col)=>this.handleMouseEnter(row,col)}\n                                onMouseUp = {()=>this.handleMouseUp()}\n                                onMouseLeave = {(row, col)=>this.handleMouseLeave(row,col)}>\n                                </Node>})}</tr>\n                        })}\n            </tbody>\n        </table>\n        </div>\n        )\n    }\n}\n\n// Helper Functions\nfunction getGrid(width, height) {\n    const grid = []\n    for(let i = 0; i<height; i++){\n        const row = []\n        for(let j = 0; j <width; j++){ \n            row.push(newNode(i,j))\n           }\n            grid.push(row)\n    }\n    return grid\n }\n\n function newNode(i,j) {\n     return{\n         row: i,\n         col: j,\n         isStart: i === STARTNODE_i && j === STARTNODE_j,\n         isEnd: i === ENDNODE_i && j === ENDNODE_j,\n         distance: Infinity,\n         previous: null,\n         isVisited: false,\n         isWall: false,\n         h:0,\n         g:0,\n         f:0\n     }\n }\n \nfunction toggleWall(grid, i, j){\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isWall: !node.isWall,\n    }\n    ng[i][j] = n\n    return ng\n\n}\n\nfunction makeStart(grid, i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isStart: true,\n        isWall: false\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction removeStart(grid,i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isStart: false,\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction makeEnd(grid, i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isEnd: true,\n        isWall: false\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction removeEnd(grid,i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isEnd: false,\n    }\n    ng[i][j] = n\n    return ng\n}\n\nexport default Visualizer","import React from \"react\";\nimport Visulalizer from \"./Visulalizer/Visualizer\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      currentAlgo: \"Dijkstra\"\n    }\n    this.child = React.createRef()\n  }\n  chageAlgo(a){\n    this.setState({currentAlgo:a})\n  }\n  clear(e){\n    e.preventDefault()\n    this.child.current.clear(e)\n  }\n  Visualize(e){\n    e.preventDefault()\n    const algo = this.state.currentAlgo\n    console.log(algo)\n    if(algo === \"Dijkstra\"){\n      this.child.current.visualizeDijkstra()\n    }\n    if(algo === \"A*\"){\n      this.child.current.visualizeAStar()\n    }\n    if(algo === \"DFS\"){\n      this.child.current.visualizeDFS()\n    }\n    if(algo === \"BFS\"){\n      this.child.current.visualizeBFS()\n    }\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <img src=\"./logo.png\" width=\"30\" height=\"30\" style = {{marginRight:\"10px\"}} alt=\"\"></img>\n      <a className=\"navbar-brand\" href=\"#\">Algorithm Visualizer</a>\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav mr-auto\">\n      {/* <li className=\"nav-item active\">\n      <a className=\"nav-link\" href=\"https://github.com/JaivalBhup/AlgorithmVisualizer-React\">GitHub Repo</a>\n      </li> */}\n      \n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"https://github.com/JaivalBhup/AlgorithmVisualizer-React\">GitHub Repo</a>\n      </li>\n      <li className=\"nav-item dropdown\">\n        <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          {this.state.currentAlgo}\n        </a>\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n          <button className=\"dropdown-item\" onClick={(e)=>this.chageAlgo(\"Dijkstra\")}>Dijkstra</button>\n          <a className=\"dropdown-item\" onClick={(e)=>this.chageAlgo(\"A*\")}>A*</a>\n          <div className=\"dropdown-divider\"></div>\n          <a className=\"dropdown-item\" onClick={(e)=>this.chageAlgo(\"BFS\")}>Breadth First Search</a>\n          <a className=\"dropdown-item\" onClick={(e)=>this.chageAlgo(\"DFS\")}>Depth First Search</a> \n        </div>\n      </li>\n      </ul>\n      <form className=\"form-inline my-2 my-lg-0\">\n      <button style={{marginRight: \"10px\"}} className=\"btn btn-danger my-2 my-sm-0\" onClick= {(e)=>this.clear(e)}>Clear Grid</button>\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" onClick= {(e)=>this.Visualize(e)}>Visualize {this.state.currentAlgo}</button>\n      </form>\n      </div>\n      </nav>\n      <Visulalizer\n      ref = {this.child} \n      currentAlgo = {this.state.currentAlgo}\n      ></Visulalizer>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}