{"version":3,"sources":["Visulalizer/Node.js","Visulalizer/Algorithms/dijkstra.js","Visulalizer/Algorithms/AStar.js","Visulalizer/Algorithms/dfs.js","Visulalizer/Algorithms/bfs.js","Visulalizer/Algorithms/gbs.js","Visulalizer/MazeAlgorithms/RandomDFS.js","Visulalizer/MazeAlgorithms/RecursiveDivision.js","Visulalizer/Visualizer.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","isEnd","isStart","col","row","isWall","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","addedClass","id","className","React","Component","dijkstra","grid","startNode","endNode","i","f","Infinity","changeFtoInfinity","path","unvisitedNodes","nodes","j","push","getAllNodes","length","sort","n1","n2","nextNode","shift","isVisited","updateNeighbour","node","neighbours","filter","neighbour","getNeighbours","n","previous","getPath","cn","unshift","getH","node1","node2","Math","abs","traverse","visited","ns","includes","DFS","t","queue","current","walls","recursiveDivision","console","log","addOuterWalls","addInnerWalls","h","minX","maxX","minY","maxY","y","floor","randomNumber","hole","index","indexOf","splice","addHWall","x","addVWall","min","max","random","STARTNODE_i","STARTNODE_j","ENDNODE_i","ENDNODE_j","getGrid","width","height","newNode","distance","g","makeNewNode","ng","slice","toggleWall","removeStart","removeEnd","Visualizer","state","mousePressed","startPicked","endPicked","message","showScores","algoIsRunning","setState","document","getElementById","innerHTML","makeStart","makeEnd","shortPath","showScore","setTimeout","animateShortestPath","shortestPath","animate","open","closed","lowestIndex","currentNode","trackG","AStar","BFS","GBS","clear","stack","next","generateMazeRandomDFS","animateWalls","w","makeWalls","map","rowId","cell","cellId","handleMouseDown","handleMouseEnter","handleMouseUp","handleMouseLeave","App","currentAlgo","algoTypeWeighted","child","createRef","prevState","a","algo","e","preventDefault","clearAnimation","visualizeDijkstra","visualizeAStar","visualizeDFS","visualizeBFS","visualizeGBS","maze","visualizeRandomDFSMaze","visualizeRecursiveDivision","src","style","marginRight","alt","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","chageAlgo","createMaze","aria-label","marginTop","marginLeft","fontSize","border","borderRadius","type","changeShowScores","disabled","clearPath","Visualize","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.c1510d54.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Node.css\"\n\nexport default class Node extends React.Component{\n    render(){\n        const {isEnd, isStart, col, row, isWall, onMouseDown, onMouseEnter, onMouseUp, onMouseLeave} = this.props\n        const addedClass = isStart ? \"node-start\" : isEnd ? \"node-end\" :isWall ? 'node-wall' : '';\n        return <td id = {`node-${row}-${col}`}\n                    className = {`node ${addedClass}`}\n                    onMouseDown = {()=>onMouseDown(row,col)}\n                    onMouseEnter = {() => onMouseEnter(row,col)}\n                    onMouseUp = {()=>onMouseUp()}\n                    onMouseLeave = {()=>onMouseLeave(row,col)}\n                    ></td>\n    }\n}\n\nexport const DEFAULT_NODE = {\n    row: 0,\n    col: 0,\n};","\n export function dijkstra(grid, startNode, endNode){\n    if (!startNode || !endNode || (startNode === endNode)){\n        return false;\n    }\n    changeFtoInfinity(grid)\n    const path = [];\n    startNode.f = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while(!!unvisitedNodes.length){\n        sortNodes(unvisitedNodes);\n        const nextNode = unvisitedNodes.shift();\n        if (nextNode.isWall) continue;\n        if (nextNode.f === Infinity) return -1;\n        nextNode.isVisited = true\n        path.push(nextNode)\n        if(nextNode === endNode) return path\n        updateNeighbour(nextNode, grid)\n    }\n     \n}\n\nfunction sortNodes(n){\n    n.sort((n1, n2) => n1.f - n2.f );\n}\n\nfunction updateNeighbour(node,grid) {\n    const neighbours = getNeighbours(node, grid);\n    for(const n of neighbours){\n        n.f = node.f + 1;\n        n.previous = node\n    }\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}\n\nfunction getAllNodes(grid){\n    const nodes = [];\n    for(let i of grid){\n        for(let j of i){\n            nodes.push(j);\n        }\n    }\n    return nodes;\n}\n\nfunction changeFtoInfinity(grid) {\n    for(let i of grid){\n        for(let j of i){\n            j.f = Infinity\n        }\n    }\n}\n\nexport function getPath(endNode) {\n    const path = []\n    let cn = endNode\n    while(cn !== null){\n        path.unshift(cn)\n        cn = cn.previous\n    }\n    return path\n}","export function AStar(grid,startNode,endNode) {\n    if (!startNode || !endNode || (startNode === endNode)){\n        return false;\n    }\n    const open = []\n    const closed = []\n    open.push(startNode);\n    while(true){\n        if(open.length > 0){\n            let lowestIndex = 0\n            for(let i = 0; i<open.length; i++){\n                if (open[i].f < open[lowestIndex].f){\n                    lowestIndex = i\n                }\n            }\n            const currentNode = open[lowestIndex]\n            if(currentNode === endNode){\n                return closed\n            }\n            closed.push(currentNode)\n            currentNode.isVisited = true\n            const index = open.indexOf(currentNode)\n            if(index>-1){\n                open.splice(index,1)\n            }\n            const neighbours = getNeighbours(currentNode, grid)\n            for(let n of neighbours){\n                if(!n.isWall && !(closed.includes(n))){\n                    const trackG = currentNode.g + 1\n                    if(open.includes(n)){\n                        if(n.g>trackG){\n                            n.h = getH(n, endNode)\n                            n.g = trackG\n                            n.f = n.g + n.h\n                        }\n                    }\n                    else{\n                        n.h = getH(n, endNode)\n                        n.g = trackG\n                        n.f = n.g + n.h\n                        open.push(n)\n                    }\n                    n.previous = currentNode\n                }\n            }\n\n        }\n        else{\n            return -1\n        }\n    }\n}\n\nfunction getH(node1,node2) {\n    let p =  Math.abs(node1.row - node2.row) + Math.abs(node1.col-node2.col)\n    return p\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}","\nfunction traverse(grid, startNode, visited){\n    visited.push(startNode)\n    const neighbours = getNeighbours(startNode, grid);\n    const ns = neighbours.filter(n=>!visited.includes(n))\n    for(let n of ns){\n        if(n.isWall){continue}\n        if(!n.isVisited){\n            n.previous = startNode;\n            n.isVisited = true\n            traverse(grid, n, visited);\n        }\n    }\n    return visited\n}\n\nexport function DFS(grid, startNode, endNode) {\n    startNode.isVisited = true\n    const nodes = traverse(grid, startNode,[])\n    const t = []\n    for(let n of nodes){\n        if(n===endNode){return t}\n        t.push(n)\n    }\n    return -1\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    \n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours);\n}","function traverse(grid, startNode) {\n    const queue = []\n    const visited = []\n    startNode.isVisited = true\n    queue.push(startNode)\n    while(queue.length>0){\n        const current = queue.shift()\n        visited.push(current)\n        const neighbours = getNeighbours(current, grid)\n        for(let n of neighbours){\n            if(!n.isVisited && !n.isWall){\n                queue.push(n)\n                n.previous = current\n                n.isVisited = true\n            }\n        }\n    }\n    return visited\n}\n\nexport function BFS(grid, startNode, endNode) {\n    const nodes = traverse(grid, startNode)\n    const t = []\n    for(let n of nodes){\n        if(n===endNode){return t}\n        t.push(n)\n    }\n    return -1\n}\n\nexport function Bidirectional(grid, startNode, endNode) {\n    const grid1 = grid.slice()\n    const grid2 = grid.slice()\n    const forward = traverse(grid1, startNode)\n    const backward = traverse(grid2, endNode)\n    console.log(backward)\n    // console.log(forward)\n    // console.log(backward)\n    // let intersection = []\n    // for(let f of forward){\n    //     backward.slice().reverse().forEach((b)=>{\n    //         if(f.row === b.row && f.col === b.col){\n    //             intersection[0] = f\n    //             intersection[1] = b\n    //             const path1 = forward.splice(0, forward.indexOf(intersection[0]))\n    //             const path2 = backward.splice(0, backward.indexOf(intersection[1]))\n    //             return [path1, path2, intersection]\n    //         }\n    //     })\n    // }\n    return -1\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}","\nexport function GBS(grid, startNode, endNode){\n    const queue = []\n    const visited = []\n    startNode.f = getH(startNode, endNode)\n    startNode.isVisited = true\n    queue.push(startNode)\n    while(queue.length > 0){\n        sortByCost(queue)\n        const currentNode = queue.shift()\n        \n        visited.push(currentNode)\n        if(currentNode === endNode){\n            return visited;}\n        const neighbours = getNeighbours(currentNode, grid)\n        for(let n of neighbours){\n            if(n.isWall) continue\n            queue.push(n)\n            n.f = getH(n, endNode)\n            n.previous = currentNode\n            n.isVisited = true\n            \n        }\n    }\n    return -1\n}\n\nfunction sortByCost(q) {\n    q.sort((n1,n2)=>n1.f - n2.f)\n}\n\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row>0)neighbours.push(grid[row-1][col]);\n    if(row<grid.length-1)neighbours.push(grid[row+1][col]);\n    if(col>0)neighbours.push(grid[row][col-1]);\n    if(col<grid[0].length-1)neighbours.push(grid[row][col+1]);\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}\n\nfunction getH(node1,node2) {\n    let p =  Math.abs(node1.row - node2.row) + Math.abs(node1.col-node2.col)\n    return p\n}","export function generateMazeRandomDFS(grid, startNode, endNode){\n    const walls = []\n    for(let i of grid){\n        for(let j of i){\n            if(j!==startNode&&j!==endNode){\n                j.isWall=true\n            }\n        }\n    }\n    let current = startNode\n    const stack = []\n    current.isVisited = true\n    while(true){\n        const neighbours = getNeighbours(current, grid)\n        if(neighbours.length > 0){\n            const r = Math.floor(Math.random()*neighbours.length)\n            const next = neighbours[r]\n            next.isVisited = true\n            if(next.row > current.row){\n                grid[current.row+1][current.col].isWall = false\n            }\n            else if(next.row < current.row){\n                grid[current.row-1][current.col].isWall = false\n            }\n            else if(next.col < current.col){\n                grid[current.row][current.col-1].isWall = false\n            }\n            else if(next.col > current.col){\n                grid[current.row][current.col+1].isWall = false\n            }\n            stack.push(current)\n            next.isWall = false\n            current = next\n        }\n        else if(stack.length > 0){\n            current = stack.shift()\n        }\n        else{\n            break\n        }\n\n    }\n\n    for(let i of grid){\n        for(let j of i){\n            if(j.isWall && !j.isStart && !j.isEnd){\n                walls.push(j)\n            }\n        }\n    }\n\n    return walls\n    \n}\nfunction getNeighbours(node, grid) {\n    const neighbours = [];\n    const {row, col} = node;\n    if(row-1>0){neighbours.push(grid[row-2][col])};\n    if(row+1<grid.length-1){neighbours.push(grid[row+2][col])};\n    if(col-1>0){neighbours.push(grid[row][col-2])};\n    if(col+1<grid[0].length-1){neighbours.push(grid[row][col+2])};\n\n    return (neighbours.filter(neighbour => !neighbour.isVisited));\n}","let walls = []\nexport function recursiveDivision(grid) {\n    walls = []\n    console.log(grid)\n    addOuterWalls(grid)\n    addInnerWalls(grid, true, 1, grid[0].length-2, 1, grid.length-2)\n    return walls;\n}\n\nfunction addOuterWalls(grid) {\n    for(let i = 0; i<grid.length; i++){\n        if(i===0||i===grid.length-1){\n            for (let j = 0; j < grid[0].length; j++) {\n                if(!grid[i][j].isStart && !grid[i][j].isEnd){\n                    walls.push(grid[i][j])\n                    grid[i][j].isWall = true\n                }\n            }\n        }\n        else{\n            if(!grid[i][0].isStart && !grid[i][0].isEnd){\n                grid[i][0].isWall = true\n                walls.push(grid[i][0]);\n            }\n            if(!grid[i][grid[0].length - 1].isStart && !grid[i][grid[0].length - 1].isEnd){\n                grid[i][grid[0].length - 1].isWall = true\n                walls.push(grid[i][grid[0].length - 1]);\n            }\n        }\n    }\n}\nfunction addInnerWalls(grid,h, minX, maxX, minY, maxY) {\n    if(h){\n        if(maxX - minX<2){\n            return;\n        }\n        let y = Math.floor(randomNumber(minY, maxY)/2)*2;\n        addHWall(grid,minX,maxX,y);\n        addInnerWalls(grid,!h, minX, maxX, minY, y-1);\n        addInnerWalls(grid,!h, minX, maxX, y+1, maxY);\n    }\n    else{\n        if(maxY - minY<2){\n            return;\n        }\n        let x = Math.floor(randomNumber(minX, maxX)/2)*2;\n        addVWall(grid,minY,maxY,x)\n        addInnerWalls(grid,!h, minX, x-1, minY, maxY)\n        addInnerWalls(grid,!h, x+1, maxX, minY, maxY)\n    }\n}\n\nfunction addHWall(grid,minX, maxX, y) {\n    var hole = Math.floor(randomNumber(minX, maxX)/2)*2+1;\n    for(let i = minX ; i<=maxX; i++){\n        if(i===hole){\n            grid[y][i].isWall = false\n            if(walls.includes(grid[y][i])){\n                let index = walls.indexOf(grid[y][i])\n                walls.splice(index,1)\n            }\n        }else{\n            if(!grid[y][i].isStart && !grid[y][i].isEnd){\n                grid[y][i].isWall = true\n                walls.push(grid[y][i])\n            }\n        }\n    }\n}\nfunction addVWall(grid,minY, maxY, x) {\n    var hole = Math.floor(randomNumber(minY, maxY)/2)*2+1;\n    for(let i = minY ; i<=maxY; i++){\n        if(i===hole){\n            grid[i][x].isWall = false\n            if(walls.includes(grid[i][x])){\n                let index = walls.indexOf(grid[i][x])\n                walls.splice(index,1)\n            }\n        }else{\n            if(!grid[i][x].isStart && !grid[i][x].isEnd){\n                grid[i][x].isWall = true\n                walls.push(grid[i][x])\n            }\n        }\n    }\n}\nfunction randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from \"react\";\nimport Node from \"./Node\";\nimport {dijkstra,getPath} from \"./Algorithms/dijkstra\"\nimport {AStar} from \"./Algorithms/AStar\"\nimport {DFS} from './Algorithms/dfs';\nimport {BFS, Bidirectional} from './Algorithms/bfs';\nimport {GBS} from './Algorithms/gbs';\nimport {generateMazeRandomDFS} from './MazeAlgorithms/RandomDFS';\nimport { recursiveDivision } from \"./MazeAlgorithms/RecursiveDivision\";\nimport \"./grid.css\";\n\nlet STARTNODE_i = 10\nlet STARTNODE_j = 15\nlet ENDNODE_i = 10\nlet ENDNODE_j = 35\nconst WIDTH = 60\nconst HEIGHT = 30\n\nclass Visualizer extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            grid: [],\n            mousePressed:false,\n            startPicked:false,\n            endPicked: false,\n            message: \"Drag and drop Start and End nodes to change their position. Drag through the grid to create walls\",\n            showScores: false,\n            algoIsRunning: false\n        }\n    }\n    componentDidMount(){\n        const grid = getGrid(WIDTH,HEIGHT)\n        this.setState({grid: grid})\n    }\n\n    //Clears Animated nodes only <- Bugs\n    clearAnimation(){\n       // const grid = getGrid(WIDTH,HEIGHT)\n        for(let i = 0; i<this.state.grid.length; i++){\n            for(let j = 0; j < this.state.grid[0].length;j++){\n                if(!this.state.grid[i][j].isWall){\n                    this.setState({grid: makeNewNode(this.state.grid, i, j)})\n                    if(!this.state.grid[i][j].isStart && !this.state.grid[i][j].isEnd){\n                        document.getElementById(`node-${i}-${j}`).className = \"node\";\n                        document.getElementById(`node-${i}-${j}`).innerHTML = \"\";\n                    }\n                \n                }\n            }\n        } \n    }\n    clear(){\n        const grid = getGrid(WIDTH,HEIGHT)\n        for(let i = 0; i<this.state.grid.length; i++){\n            for(let j = 0; j < this.state.grid[0].length;j++){\n                if(!this.state.grid[i][j].isStart && !this.state.grid[i][j].isEnd){\n                    document.getElementById(`node-${i}-${j}`).className = \"node\";\n                    document.getElementById(`node-${i}-${j}`).innerHTML = \"\";\n                }\n            }\n        } \n        this.setState({grid: grid,message: \"Drag and drop Start and End nodes to change their position. Drag through the grid to create walls\"})      \n    }\n    //----------Clear\n\n    //Mouse Events For Wall, Start and End\n    handleMouseDown(i,j){\n        const node = this.state.grid[i][j]\n        if(node.isStart){\n            const ng = removeStart(this.state.grid, i,j)\n            this.setState({mousePressed:true, startPicked: true, grid: ng})\n            \n        }\n        else if(node.isEnd){\n            const ng = removeEnd(this.state.grid, i,j)\n            this.setState({mousePressed:true, endPicked: true, grid: ng})\n        }\n        else{\n            const ng = toggleWall(this.state.grid, i, j);\n            this.setState({grid:ng, mousePressed : true});\n        }\n    }\n    handleMouseEnter(i,j){\n        if(!this.state.mousePressed) return;\n        if(this.state.startPicked){\n            STARTNODE_i = i\n            STARTNODE_j = j\n            const ng = makeStart(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else if(this.state.endPicked){\n            ENDNODE_i = i\n            ENDNODE_j = j\n            const ng = makeEnd(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else{\n        const ng = toggleWall(this.state.grid, i, j);\n        this.setState({grid:ng});\n        }\n    }\n    handleMouseLeave(i,j){\n        if(!this.state.mousePressed) return;\n        if(this.state.startPicked){\n            const ng = removeStart(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n        else if(this.state.endPicked){\n            const ng = removeEnd(this.state.grid, i,j)\n            this.setState({grid: ng})\n        }\n    }\n    handleMouseUp(){\n        this.setState({startPicked: false, endPicked: false,mousePressed : false});\n    }\n\n    //------------------ Mouse Events\n\n    //Animation\n    animate(path, shortPath, showScore){\n        if(path===-1){this.setState({message:\"No Solution\"});\n        return;    \n    }\n        else{\n            for(let i = 0; i <= path.length; i++){\n                if (i===path.length){\n                    setTimeout(()=>{\n                        this.animateShortestPath(shortPath)\n                    }, 10*i)\n                    return;\n                }\n            setTimeout(()=>{\n                const node = path[i]\n                if(!node.isStart && !node.isEnd){\n                document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n                if(showScore){\n                    document.getElementById(`node-${node.row}-${node.col}`).innerHTML = `<p class = \"score\">${node.f}</p>`;\n                }\n                }\n                }, 10*i);\n            }\n    }\n    }\n    animateShortestPath(path){\n        for(let i = 0; i < path.length; i++){\n            setTimeout(()=>{\n                const node = path[i]\n                if(!node.isStart && !node.isEnd){\n                document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest\";\n                }\n                }, 10*i);\n            }\n            this.setState({message:\"Found the shortest path.\"})\n            setTimeout(()=>{\n                this.setState({message:\"Clear the grid\"})\n            }, 3000)\n            \n    }\n    //--------animation\n\n    // Dijkstra\n    visualizeDijkstra(showScore){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = dijkstra(grid,startNode, endNode)\n        const shortestPath = getPath(endNode)\n        this.animate(path, shortestPath, showScore);\n    }\n    //-----dijkstra\n    // A*\n    visualizeAStar(showScore){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = AStar(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath, showScore);\n    }\n    //------a*\n    //DFS\n    visualizeDFS(){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = DFS(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath, false);\n    }\n    //-------DFS\n    //BFS\n    visualizeBFS(){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = BFS(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path, shortestPath, false);\n    }\n    //------BFS\n    //Greedy first search\n    visualizeGBS(showScore){\n        this.setState({message:\"Searching...\", algoIsRunning:true})\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const path = GBS(grid,startNode, endNode)\n        const shortestPath = getPath(endNode);\n        this.animate(path,shortestPath, showScore)\n    }\n\n//     animateBidirectional(path, shortestPath1, shortestPath2){\n//             for(let i = 0; i <= path[0].length; i++){\n//                 // if (i===path.length){\n//                 //     setTimeout(()=>{\n//                 //         this.animateShortestPath(shortestPath1)\n//                 //     }, 10*i)\n//                 //     return;\n//                 // }\n//             setTimeout(()=>{\n//                 const node1 = path[0][i]\n//                 const node2 = path[1][i]\n//                     if(node1 && node2){\n//                         if(!node1.isStart && !node1.isEnd && !node2.isStart && !node2.isEnd){\n//                             document.getElementById(`node-${node1.row}-${node1.col}`).className = \"node node-visited\";\n//                             document.getElementById(`node-${node2.row}-${node2.col}`).className = \"node node-visited\";\n//                     }\n//             }\n//                 }, 10*i);\n//             }\n// }\n    // visualizeBidirectional(){\n    //     this.setState({message:\"Searching...\", algoIsRunning:true})\n    //     const grid = this.state.grid\n    //     const startNode = grid[STARTNODE_i][STARTNODE_j]\n    //     const endNode = grid[ENDNODE_i][ENDNODE_j]\n    //     const path = Bidirectional(grid,startNode, endNode)\n    //     if(path===-1){\n    //         this.setState({message:\"No Solution\"});\n    //         return; \n    //     }\n    //     //console.log(path)\n    //     // const shortestPath1 = getPath(path[2][0])\n    //     // const shortestPath2 = getPath(path[2][1])\n    //     //this.animateBidirectional(path, shortestPath1, shortestPath2)\n    // }\n    visualizeRandomDFSMaze(){\n        this.setState({algoIsRunning:true})\n        this.clear()\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const walls = generateMazeRandomDFS(grid, startNode, endNode)\n        this.animateWalls(walls)\n    }\n    visualizeRecursiveDivision(){\n        this.setState({algoIsRunning:true})\n        this.clear()\n        const grid = this.state.grid\n        const startNode = grid[STARTNODE_i][STARTNODE_j]\n        const endNode = grid[ENDNODE_i][ENDNODE_j]\n        const walls = recursiveDivision(grid, startNode, endNode)\n        this.animateWalls(walls)\n    }\n    animateWalls(walls){\n        for(let i = 0; i<=walls.length;i++){  \n            if(i===walls.length){\n                setTimeout(()=>{\n                    const ng = makeWalls(this.state.grid,walls)\n                    this.setState({grid:ng})\n                },10*i)\n                return; \n            }\n            setTimeout(()=>{\n                if(walls[i]){\n                document.getElementById(`node-${walls[i].row}-${walls[i].col}`).className = \"node node-wall\";\n                }\n                },10*i)\n    }\n    }\n    render(){\n        const nodes = this.state.grid\n        return (<div className = \"main\">\n        <h6>{this.state.message}</h6>\n            <table className = \"grid\">\n            <tbody>\n            {nodes.map((row, rowId) => {\n                return <tr className = \"row\" key = {rowId}>\n                        {row.map((cell, cellId)=>{\n                            const {row, col, isEnd, isStart, isWall, isVisited} = cell;\n                            return <Node\n                                key = {cellId}\n                                col = {col}\n                                row = {row}\n                                isStart = {isStart}\n                                isEnd = {isEnd}\n                                isWall = {isWall}\n                                isVisited = {isVisited}\n                                onMouseDown = {(row,col)=>this.handleMouseDown(row,col)}\n                                onMouseEnter = {(row,col)=>this.handleMouseEnter(row,col)}\n                                onMouseUp = {()=>this.handleMouseUp()}\n                                onMouseLeave = {(row, col)=>this.handleMouseLeave(row,col)}>\n                                </Node>})}</tr>\n                        })}\n            </tbody>\n        </table>\n        </div>\n        )\n    }\n}\n\n// Helper Functions\nfunction getGrid(width, height) {\n    const grid = []\n    for(let i = 0; i<height; i++){\n        const row = []\n        for(let j = 0; j <width; j++){ \n            row.push(newNode(i,j))\n           }\n            grid.push(row)\n    }\n    return grid\n }\n\n function newNode(i,j) {\n     return{\n         row: i,\n         col: j,\n         isStart: i === STARTNODE_i && j === STARTNODE_j,\n         isEnd: i === ENDNODE_i && j === ENDNODE_j,\n         distance: Infinity,\n         previous: null,\n         isVisited: false,\n         isWall: false,\n         h:0,\n         g:0,\n         f:0\n     }\n }\n \nfunction makeNewNode(grid,i,j){\n    const ng = grid.slice();\n    const node = newNode(i,j);\n    ng[i][j] = node\n    return ng\n}\n\nfunction toggleWall(grid, i, j){\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isWall: !node.isWall,\n    }\n    ng[i][j] = n\n    return ng\n\n}\nfunction makeWalls(grid, walls){\n    const ng = grid.slice();\n        for(let w of walls){\n            const i = w.row\n            const j = w.col\n            ng[i][j] = w;\n        }\n    return ng\n\n}\n\nfunction makeStart(grid, i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isStart: true,\n        isWall: false\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction removeStart(grid,i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isStart: false,\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction makeEnd(grid, i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isEnd: true,\n        isWall: false\n    }\n    ng[i][j] = n\n    return ng\n}\nfunction removeEnd(grid,i,j) {\n    const ng = grid.slice();\n    const node = ng[i][j];\n    \n    const n = {\n        ...node,\n        isEnd: false,\n    }\n    ng[i][j] = n\n    return ng\n}\n\nexport default Visualizer","import React from \"react\";\nimport Visulalizer from \"./Visulalizer/Visualizer\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      currentAlgo: \"Dijkstra\",\n      algoTypeWeighted:true,\n      showScores:false\n    }\n    this.child = React.createRef()\n  }\n  changeShowScores(){\n    this.setState(prevState=>{\n      return {\n        showScores: !prevState.showScores\n      }\n    })\n  }\n  chageAlgo(a){\n    this.setState({currentAlgo:a})\n    setTimeout(()=>{\n    console.log(this.state.currentAlgo)\n    const algo = this.state.currentAlgo\n    if(algo === \"Dijkstra\"){\n      this.setState({algoTypeWeighted:true})\n    }\n    if(algo === \"A*\"){\n      this.setState({algoTypeWeighted:true})\n        }\n    if(algo === \"DFS\"){\n      this.setState({algoTypeWeighted:false})\n        }\n    if(algo === \"BFS\"){\n      this.setState({algoTypeWeighted:false})\n        }\n    if(algo === \"GBS\"){\n      this.setState({algoTypeWeighted:true})\n        }\n    if(algo === \"Bidirectional\"){\n      this.setState({algoTypeWeighted:false})\n        }\n    },100)\n  }\n  clear(e){\n    e.preventDefault()\n    this.child.current.clear(e)\n  }\n  clearPath(e){\n    e.preventDefault()\n    this.child.current.clearAnimation(e)\n  }\n  Visualize(e, showScore){\n    e.preventDefault()\n    const algo = this.state.currentAlgo\n    console.log(algo)\n    if(algo === \"Dijkstra\"){\n      this.child.current.visualizeDijkstra(showScore)\n    }\n    if(algo === \"A*\"){\n      this.child.current.visualizeAStar(showScore)\n    }\n    if(algo === \"DFS\"){\n      this.child.current.visualizeDFS()\n    }\n    if(algo === \"BFS\"){\n      this.child.current.visualizeBFS()\n    }\n    if(algo === \"GBS\"){\n      this.child.current.visualizeGBS(showScore)\n    }\n    // if(algo === \"Bidirectional\"){\n    //   this.child.current.visualizeBidirectional()\n    //     }\n  }\n  createMaze(maze){\n    if(maze === \"RDFS\"){\n      this.child.current.visualizeRandomDFSMaze()\n    }\n    if(maze === \"RDM\"){\n      this.child.current.visualizeRecursiveDivision()\n    }\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <img src=\"./logo.png\" width=\"30\" height=\"30\" style = {{marginRight:\"10px\"}} alt=\"\"></img>\n      <a className=\"navbar-brand\" href=\"https://github.com/JaivalBhup/AlgorithmVisualizer-React\">GitHub Repo</a>\n      {/* <a className=\"navbar-brand\" href=\"#\">Algorithm Visualizer</a> */}\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav mr-auto\">\n      {/* <li className=\"nav-item active\">\n      <a className=\"nav-link\" href=\"https://github.com/JaivalBhup/AlgorithmVisualizer-React\">GitHub Repo</a>\n      </li> */}\n      \n      {/* <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"https://github.com/JaivalBhup/AlgorithmVisualizer-React\">GitHub Repo</a>\n      </li> */}\n      <li className=\"nav-item dropdown\">\n        <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          {this.state.currentAlgo}\n        </a>\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n          <a className=\"dropdown-item\" onClick={()=>this.chageAlgo(\"Dijkstra\")}>Dijkstra</a>\n          <a className=\"dropdown-item\" onClick={()=>this.chageAlgo(\"A*\")}>A*</a>\n          <a className=\"dropdown-item\" onClick={()=>this.chageAlgo(\"GBS\")}>Greedy Best Search</a>\n          <div className=\"dropdown-divider\">Unweighted</div>\n          <a className=\"dropdown-item\" onClick={()=>this.chageAlgo(\"BFS\")}>Breadth First Search</a>\n          <a className=\"dropdown-item\" onClick={()=>this.chageAlgo(\"Bidirectional\")}>Bidirectional</a>\n          <a className=\"dropdown-item\" onClick={()=>this.chageAlgo(\"DFS\")}>Depth First Search</a> \n        </div>\n        \n      </li>\n      <li className=\"nav-item dropdown\">\n        <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          Create Maze\n        </a>\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n          <a className=\"dropdown-item\" onClick={()=>this.createMaze(\"RDFS\")}>Random Depth First Search</a>\n          <a className=\"dropdown-item\" onClick={()=>this.createMaze(\"RDM\")}>Recursive Division</a>\n        </div>  \n      </li>\n      <li className = \"nav-item\">\n      <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n      <div style= {{marginTop:\"7px\",marginLeft:\"20px\",fontSize:\"15px\"}}>Show Scores:</div>\n      <div style= {{marginTop:\"3px\", border:\"1px solid gray\", borderRadius:\"5px\"}} className=\"btn-group btn-group-sm\" role=\"group\" aria-label=\"First group\">\n      <button \n        type=\"button\" \n        className={this.state.showScores ? \"btn btn-dark\" : \"btn btn-light\"}\n        onClick={()=>this.changeShowScores()}\n        disabled = {this.state.algoTypeWeighted && !this.state.showScores ? false : true}>\n        Yes</button>\n      <button \n        type=\"button\" \n        className={this.state.showScores ? \"btn btn-light\" : \"btn btn-dark\"}\n        onClick={()=>this.changeShowScores()}\n        disabled = {this.state.algoTypeWeighted && this.state.showScores ? false : true}>\n        No</button>\n    </div>\n    \n  </div>\n      \n      </li>\n      </ul>\n      <form className=\"form-inline my-2 my-lg-0\">\n      <div className=\"btn-group btn-group-md\" role=\"group\" aria-label=\"First group\">\n        <button className=\"btn btn-warning my-2 my-sm-0\" onClick= {(e)=>this.clearPath(e)}>Clear Path</button>\n        <button className=\"btn btn-danger my-2 my-sm-0\" onClick= {(e)=>this.clear(e)}>Clear Grid</button>\n        <button className=\"btn btn-success sm\" onClick= {(e)=>this.Visualize(e, this.state.showScores)}>Visualize {this.state.currentAlgo}</button>\n      </div>\n      </form>\n      </div>\n      </nav>\n      <Visulalizer\n      ref = {this.child} \n      currentAlgo = {this.state.currentAlgo}\n      ></Visulalizer>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}